pipeline {
    agent any

    tools {
        maven "maven3"
    }

    environment {
        GIT_CREDENTIALS = 'GitHub'
        IMAGE_NAME = 'rupesh1997/one-tier-app'
        IMAGE_TAG = '1.0.0'
        DOCKERHUB_CREDENTIALS = 'DockerHub'
        GIT_URL = 'https://github.com/rupesh-hub/one-tier-app-jenkins-k8s.git'
        SONAR_HOME = tool "sonar"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: env.GIT_CREDENTIALS, url: env.GIT_URL
            }
        }

        stage('Build') {
            steps {
                sh '''
                    cd backend
                    mvn clean package -DskipTests
                '''
            }
        }

        stage('Test') {
            steps {
                sh '''
                    cd backend
                    mvn clean test
                '''
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("sonar") {
                    sh '''
                        $SONAR_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=one-tier-app \
                        -Dsonar.projectKey=one-tier-app \
                        -Dsonar.exclusions=**/*.java
                    '''
                }
            }
        }

        stage('Prepare Docker Image') {
            steps {
                sh '''
                    cd backend
                    docker build -t ${IMAGE_NAME}:${IMAGE_TAG} -f ../docker/backend/Dockerfile .
                '''
            }
        }

        stage('Push Image to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: env.DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        docker push ${IMAGE_NAME}:${IMAGE_TAG}
                    '''
                }
            }
        }

        stage('Run with Docker Compose') {
            steps {
                sh 'docker-compose down || true'  // Stop existing containers if running
                sh 'docker-compose pull'          // Ensure the latest image is pulled
                sh 'docker-compose up -d'         // Run the app in detached mode
            }
        }
    }

    // Post-build actions
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
    }
}
