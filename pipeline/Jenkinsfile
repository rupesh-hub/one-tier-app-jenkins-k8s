pipeline {
    agent any

    tools {
        maven "maven3"
    }

    environment {
        GIT_CREDENTIALS = 'GitHub'
        IMAGE_NAME = 'rupesh1997/one-tier-app'
        IMAGE_TAG = '1.0.0'
        DOCKERHUB_CREDENTIALS = 'DockerHub'
        GIT_URL = 'https://github.com/rupesh-hub/one-tier-app-jenkins-k8s.git'
        SONAR_HOME = tool "sonar"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: env.GIT_CREDENTIALS, url: env.GIT_URL
            }
        }

        stage('Build') {
            steps {
                sh '''
                    cd backend
                    mvn clean package -DskipTests
                '''
            }
        }

        stage('Test') {
            steps {
                sh '''
                    cd backend
                    mvn clean test
                '''
            }
        }

        stage('Static code analysis') {
            environment {
                SONAR_URL = "http://51.120.245.106:9000"
            }

            steps {
//                 withCredentials([string(credentialsId: 'SonarToken', variable: 'SONAR_AUTH_TOKEN')]) {
//                     sh '''
//                         cd backend
//                         # Run the SonarQube scanner
//                         sonar-scanner \
//                             -Dsonar.projectKey=one-tier-app \
//                             -Dsonar.sources=.  \
//                             -Dsonar.host.url=${SONAR_URL} \
//                             -Dsonar.login=${SONAR_AUTH_TOKEN}
//                     '''
//                 }
                withSonarQubeEnv("sonar") {
                    sh '''
                        $SONAR_HOME/bin/sonar-scanner -Dsonar.projectName=one-tier-app -Dsonar.projectKey=one-tier-app
                       '''
                }
            }
        }

        stage('Prepare docker image') {
            steps {
                sh '''
                    cd backend
                    docker build -t ${IMAGE_NAME}:${IMAGE_TAG} -f ../docker/backend/Dockerfile .
                '''
            }
        }

        stage('Push image to dockerhub') {
            steps {
                withCredentials([usernamePassword(credentialsId: env.DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        docker push ${IMAGE_NAME}:${IMAGE_TAG}
                    '''
                }
            }
        }
    }
}